# -*- coding: utf-8 -*-
"""Calories burnt prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vjcpdWWxcdDc-kXBxIFS6KGjo6paNSKw

importing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""loading dataset"""

calories_data  = pd.read_csv('/content/calories.csv')
exercise_data  = pd.read_csv('/content/exercise (3).csv')

calories_data.head()

exercise_data.head()

"""Combining both the dataframe"""

data_final = pd.concat([calories_data['Calories'], exercise_data], axis =1)

data_final.head()

data_final.shape

data_final.info()

data_final.describe()

data_final.replace({"Gender": {'male':0, 'female':1}}, inplace = True)

print(data_final)

"""data visualization"""

sns.set()

# plotting the gender column in count plot
sns.countplot(data_final['Gender'])

# Findig the distribution of "Age" column
sns.distplot(data_final['Age'])

# finding the distribution of "height" column
sns.distplot(data_final['Height'])

# finding the distribution of "weight" column
sns.distplot(data_final['Weight'])

# finding the distribution of "duration" column
sns.distplot(data_final['Duration'])

"""Finding the correlation between data:
1. Positive correlation- On increasing one value other value also increase.
2. Negative correlation - vice versa
"""

correlation = data_final.corr()

# constructing 10X10 heatmap
plt.figure(figsize = (10,10))
sns.heatmap(correlation, cbar = True, square = True, fmt = '.1f', annot = True, annot_kws= {'size':8}, cmap = 'Blues')

"""Separating featurea and target"""

X = data_final.drop(columns= ['User_ID', 'Calories'], axis = 1)
Y= data_final['Calories']

"""Splitting data in train and test """

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

"""Model training"""

# loading the model
model = XGBRegressor()

# training the model with x train
model.fit(X_train, Y_train)

"""Evaluation"""

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

"""Mean absolute error"""

mae = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("Mean Absolute Error = ", mae)

"""making prediction"""

# input_data = ()
# # chaning the input_data in numpy array
# input_data_as_numpy_array = np.asarray(input_data)

# # reshape the data as we are predicting for one instance
# input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# # standardized the input data

# std_data = scaler.transform(input_data_reshaped)
# print(std_data)

# prediction = classifier.predict(std_data)
# print(prediction)

